pipeline {
    agent any

    parameters {
        string(name: 'DEPLOYMENT', defaultValue: 'default-deployment', description: 'Name of the deployment to apply')
    }

    environment {
        SONARQUBE_URL = "http://128.110.218.109:9000"
        SONARQUBE_TOKEN = credentials('sonar_token') // Use a credentials ID instead of hardcoding the token
    }

    stages {
        stage('Debug') {
            steps {
                script {
                    echo "SONARQUBE_URL: ${SONARQUBE_URL}"
                    echo "Java version:"
                    sh 'java -version'
                    sh "curl -X GET ${SONARQUBE_URL}/api/system/status"
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    // Perform SonarQube analysis
                    def scannerHome = tool 'sonar-scanner' // Make sure the sonar-scanner tool is installed in Jenkins
                    withSonarQubeEnv('sonar-server') { // Ensure this matches your SonarQube server configuration in Jenkins
                        sh """
                        ${scannerHome}/bin/sonar-scanner \
                          -Dsonar.projectKey=test-app \
                          -Dsonar.sources=. \
                          -Dsonar.host.url=${SONARQUBE_URL} \
                          -Dsonar.token=${SONARQUBE_TOKEN} \
                          -Dsonar.inclusions=**/*.html,**/*.css
                        """
                    }
                }
            }
        }

        stage('Deploy App') {
            steps {
                script {
                    // Apply the Kubernetes configurations
                    sh """
                    cd minikube
                    kubectl apply -f deployment.yml 
                    kubectl apply -f service.yml 
                    """
                    sleep(time: 10, unit: "SECONDS")  // Wait for resources to be applied
                }
            }
        }

        stage('Get App URL') {
            steps {
                script {
                    // Get the service URL from Minikube
                    def serviceURL = sh(script: 'minikube service morocco-service --url', returnStdout: true).trim()

                    // Print the service URL
                    echo "The application is accessible at: ${serviceURL}"
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
        }
    }
}

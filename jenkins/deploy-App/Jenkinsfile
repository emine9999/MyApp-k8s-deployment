pipeline {
    agent any
    
   environment {
        CLUSTER_NAME = "amine-cluster"
        REGION = "us-east-1"
        NAMESPACE = "python-app"
    }
    
    stages {
        stage('Deploy App') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: "awscredss",
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    script {
                        // Configure kubectl
                        sh "aws eks update-kubeconfig --name ${CLUSTER_NAME} --region ${REGION}"
                        
                        // Apply the Kubernetes configurations
                        sh """
                        cd minikube
                        kubectl apply -f kubernetes/deployment.yml 
                        kubectl apply -f kubernetes/service.yml 
                        """
                        
                        // Wait for resources to be applied
                        sleep(time: 30, unit: "SECONDS")
                    }
                }
            }
        }
        
        stage('Get App URL') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: "awscredss",
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    script {
                        // Wait for the LoadBalancer to get an external IP
                        def lbDnsName = ""
                        def maxAttempts = 30
                        def attempt = 1
                        while (lbDnsName == "" && attempt <= maxAttempts) {
                            echo "Attempt ${attempt} to get Load Balancer DNS name..."
                            lbDnsName = sh(script: """
                                aws elbv2 describe-load-balancers --region ${REGION} | \
                                grep -A 5 morocco-service | grep DNSName | awk -F'"' '{print \$4}'
                            """, returnStdout: true).trim()
                            if (lbDnsName == "") {
                                sleep(time: 10, unit: "SECONDS")
                                attempt++
                            }
                        }
                        
                        if (lbDnsName != "") {
                            echo "The application is accessible at: http://${lbDnsName}"
                        } else {
                            error "Failed to retrieve Load Balancer DNS name after ${maxAttempts} attempts"
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up...'
            // Add any cleanup steps if necessary
        }
    }
}
